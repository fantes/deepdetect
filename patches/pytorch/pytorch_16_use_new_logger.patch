diff --git a/c10/CMakeLists.txt b/c10/CMakeLists.txt
index b175e5bdd6..384ffc5c1a 100644
--- a/c10/CMakeLists.txt
+++ b/c10/CMakeLists.txt
@@ -15,6 +15,7 @@ set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 # ---[ Configure macro file.
 set(C10_USE_GFLAGS ${USE_GFLAGS}) # used in cmake_macros.h.in
 set(C10_USE_GLOG ${USE_GLOG}) # used in cmake_macros.h.in
+set(C10_USE_DDLOG ${USE_DDLOG}) # used in cmake_macros.h.in
 set(C10_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS}) # used in cmake_macros.h.in
 set(C10_USE_NUMA ${USE_NUMA})
 set(C10_USE_MSVC_STATIC_RUNTIME ${CAFFE2_USE_MSVC_STATIC_RUNTIME})
diff --git a/c10/macros/cmake_macros.h.in b/c10/macros/cmake_macros.h.in
index 2845fa1cd8..ae1e35651e 100644
--- a/c10/macros/cmake_macros.h.in
+++ b/c10/macros/cmake_macros.h.in
@@ -6,6 +6,7 @@
 
 #cmakedefine C10_BUILD_SHARED_LIBS
 #cmakedefine C10_USE_GLOG
+#cmakedefine C10_USE_DDLOG
 #cmakedefine C10_USE_GFLAGS
 #cmakedefine C10_USE_NUMA
 #cmakedefine C10_USE_MSVC_STATIC_RUNTIME
diff --git a/c10/util/Logging.cpp b/c10/util/Logging.cpp
index 89506329e8..4a6e4e7276 100644
--- a/c10/util/Logging.cpp
+++ b/c10/util/Logging.cpp
@@ -153,6 +153,15 @@ C10_DEFINE_int32(v, 0, "Equivalent to glog verbose");
 C10_DEFINE_bool(logtostderr, false, "Equivalent to glog logtostderr");
 #endif // !defined(c10_USE_GLOG)
 
+#if defined(C10_USE_DDLOG)
+namespace c10 {
+bool InitCaffeLogging(int* argc, char** argv) {
+  return true;
+}
+void UpdateLoggingLevelsFromFlags() {}
+
+} // namespace c10
+#else
 #ifdef C10_USE_GLOG
 
 // Provide easy access to the above variables, regardless whether GLOG is
@@ -336,3 +345,5 @@ MessageLogger::~MessageLogger() {
 } // namespace c10
 
 #endif // !C10_USE_GLOG
+
+#endif // !C10_USE_DDLOG
diff --git a/c10/util/Logging.h b/c10/util/Logging.h
index 9febbb8f61..11faca6bf5 100644
--- a/c10/util/Logging.h
+++ b/c10/util/Logging.h
@@ -22,11 +22,15 @@
 #endif // CAFFE2_LOG_THRESHOLD
 
 // Below are different implementations for glog and non-glog cases.
+#ifdef C10_USE_DDLOG
+#include <c10/util/logging_is_dd_log.h>
+#else
 #ifdef C10_USE_GLOG
 #include <c10/util/logging_is_google_glog.h>
 #else // !C10_USE_GLOG
 #include <c10/util/logging_is_not_google_glog.h>
 #endif // C10_USE_GLOG
+#endif // C10_USE_DDLOG
 
 C10_DECLARE_int(caffe2_log_level);
 C10_DECLARE_bool(caffe2_use_fatal_for_enforce);
@@ -107,12 +111,12 @@ using EnforceNotMet = ::c10::Error;
   } while (false)
 
 #define CAFFE_ENFORCE_FINITE(condition, ...)                        \
-    do {                                                            \
-      if (C10_UNLIKELY(!(condition))) {                             \
-        ::c10::ThrowEnforceFiniteNotMet(                            \
+  do {                                                              \
+    if (C10_UNLIKELY(!(condition))) {                               \
+      ::c10::ThrowEnforceFiniteNotMet(                              \
           __FILE__, __LINE__, #condition, ::c10::str(__VA_ARGS__)); \
-      }                                                             \
-    } while (false)
+    }                                                               \
+  } while (false)
 
 #define CAFFE_ENFORCE_WITH_CALLER(condition, ...)                         \
   do {                                                                    \
@@ -292,7 +296,7 @@ BINARY_COMP_HELPER(LessEquals, <=)
  *   // Logs caller info with an arbitrary text event, if there is a usage.
  *   C10_LOG_API_USAGE_ONCE("my_api");
  */
-#define C10_LOG_API_USAGE_ONCE(...)             \
+#define C10_LOG_API_USAGE_ONCE(...)                        \
   C10_UNUSED static bool C10_ANONYMOUS_VARIABLE(logFlag) = \
       ::c10::detail::LogAPIUsageFakeReturn(__VA_ARGS__);
 
@@ -328,7 +332,7 @@ C10_API void LogPyTorchDDPUsage(const c10::DDPLoggingData& ddpData);
 namespace detail {
 // Return value is needed to do the static variable initialization trick
 C10_API bool LogAPIUsageFakeReturn(const std::string& context);
-}
+} // namespace detail
 
 } // namespace c10
 
